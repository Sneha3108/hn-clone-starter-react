{"version":3,"sources":["components/selector.js","components/reducer.js","components/constants.js","reducer.js","middleware.js","store.js","services/ApiService.js","services/HackerNewsAPI.js","components/ListItem/ListItem.js","components/ListWrapper/ListWrapper.js","components/HackerNews.js","components/index.js","components/actions.js","App.js","serviceWorker.js","index.js"],"names":["newsDataSelector","createSelector","state","news","app","pageNo","isFetching","error","votes","type","newsData","id","currentNews","concat","newsList","slice","map","item","Object","assign","points","rootReducer","combineReducers","middlewareList","push","thunk","middleware","compose","applyMiddleware","f","configureStore","initialState","createStore","reducer","API_ROOT","process","URL","HEADERS","Accept","client","constructor","baseURL","timeout","headers","auth","axios","create","interceptors","response","use","this","handleSuccess","handleError","Promise","reject","get","path","then","data","post","payload","put","patch","delete","hackerNewsApi","page","ListItem","React","Component","props","super","getHostname","url","hostname","includes","split","incrementUpvote","updateVotesAction","index","bind","render","num_comments","title","author","created_at","site","className","onClick","ListWrapper","fetchMoreNews","fetchNewsForFirstPage","key","HackerNews","componentDidMount","message","defaultProps","connect","dispatch","fetchHackerNews","getTopNewsIds","hits","fetchHackerNewsSuccess","catch","err","fetchNewsIds","App","Boolean","window","location","match","store","ReactDOM","document","getElementById","renderApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fcc6a9bd.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\n\nconst newsSelector = state => state.news || [];\n\nexport const newsDataSelector = createSelector(\n  newsSelector,\n  news => news || []\n);\n","import {\n  FETCH_HACKER_NEWS,\n  FETCH_HACKER_NEWS_SUCCESS,\n  FETCH_HACKER_NEWS_ERROR,\n  UPDATE_HACKER_NEWS_VOTES,\n} from './constants';\n// used selector to concat the news otherwise remove the selector and simply replace news with newsData.newsData\nimport { newsDataSelector } from './selector';\n\nconst initialState = () => ({\n  news: [],\n  pageNo: 0,\n  isFetching: true,\n  error: null,\n  votes: '',\n});\n\nconst app = (state = initialState(), { type, newsData, error, pageNo, id }) => {\n  const currentNews = newsDataSelector(state);\n  switch (type) {\n    case FETCH_HACKER_NEWS:\n      return {\n        ...state,\n        isFetching: true,\n        error: null,\n      };\n    case FETCH_HACKER_NEWS_SUCCESS:\n      return {\n        ...state,\n        news: currentNews.concat(newsData),\n        isFetching: false,\n        pageNo: pageNo + 1,\n      };\n    case FETCH_HACKER_NEWS_ERROR:\n      return {\n        ...state,\n        error,\n        isFetching: false,\n      };\n    case UPDATE_HACKER_NEWS_VOTES:\n      const newsList = currentNews\n        .slice(0)\n        .map(item => Object.assign({}, item));\n      const updatedNews = newsList[id];\n      updatedNews.points += 1;\n      return {\n        ...state,\n        news: newsList,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default app;\n","export const FETCH_HACKER_NEWS = 'HN/APP/FETCH_HACKER_NEWS';\nexport const FETCH_HACKER_NEWS_SUCCESS = 'HN/APP/FETCH_HACKER_NEWS_SUCCESS';\nexport const FETCH_HACKER_NEWS_ERROR = 'HN/APP/FETCH_HACKER_NEWS_ERROR';\nexport const UPDATE_HACKER_NEWS_VOTES = 'HN/APP/UPDATE_HACKER_NEWS_VOTES';\n","import { combineReducers } from 'redux';\n\nimport app from './components/reducer';\n\nconst rootReducer = combineReducers({\n  app,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nconst isProd = process.env.NODE_ENV === 'production';\nconst middlewareList = [];\nlet devTool = f => f;\n\nmiddlewareList.push(thunk);\n\nif (!isProd) {\n  middlewareList.push(createLogger());\n}\n\nconst middleware = compose(\n  applyMiddleware(...middlewareList),\n  devTool,\n);\n\nexport default middleware;\n","import { createStore } from 'redux';\nimport reducer from './reducer';\nimport middleware from './middleware';\n\nconst configureStore = initialState => {\n  const store = createStore(reducer, initialState, middleware);\n  return store;\n};\n\nexport default configureStore;\n","import axios from 'axios';\nconst API_ROOT = process.env.URL || 'http://localhost:3000/';\nconst TIMEOUT = 20000;\nconst HEADERS = {\n  'Content-Type': 'application/json',\n  Accept: 'application/json',\n};\n\nclass ApiService {\n  constructor({ baseURL = API_ROOT, timeout = TIMEOUT, headers = HEADERS, auth }) {\n    const client = axios.create({\n      baseURL,\n      timeout,\n      headers,\n      auth,\n    });\n\n    client.interceptors.response.use(this.handleSuccess, this.handleError);\n    this.client = client;\n  }\n\n  handleSuccess(response) {\n    return response;\n  }\n\n  handleError(error) {\n    return Promise.reject(error);\n  }\n\n  get(path) {\n    return this.client.get(path).then(response => response.data);\n  }\n\n  post(path, payload) {\n    return this.client.post(path, payload).then(response => response.data);\n  }\n\n  put(path, payload) {\n    return this.client.put(path, payload).then(response => response.data);\n  }\n\n  patch(path, payload) {\n    return this.client.patch(path, payload).then(response => response.data);\n  }\n\n  delete(path) {\n    return this.client.delete(path).then(response => response.data);\n  }\n}\n\nexport default ApiService;\n","import ApiService from './ApiService';\n\nconst JSON_QUERY = '?page=';\nconst BASE_URL = 'https://hn.algolia.com/api';\nconst client = new ApiService({ baseURL: BASE_URL });\n\nconst hackerNewsApi = {};\nhackerNewsApi.getTopNewsIds = (page) => client.get(`/v1/search${JSON_QUERY}${page}`);\n\nexport default hackerNewsApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ListItem.css';\n\nclass ListItem extends React.Component {\n  static propTypes = {\n    updateVotesAction: PropTypes.func,\n    index: PropTypes.number,\n    item: PropTypes.object.isRequired,\n  };\n  constructor(props) {\n    super(props);\n    this.getHostname = this.getHostname.bind(this);\n    this.incrementUpvote = this.incrementUpvote.bind(this);\n  }\n\n  getHostname = url => {\n    let hostname = '';\n    if (url) {\n      if (url.includes('www.')) {\n        hostname = url.split('www.')[1].split('/')[0];\n      }\n      return hostname;\n    }\n  };\n\n  incrementUpvote = () => {\n    this.props.updateVotesAction(this.props.index);\n  };\n\n  render() {\n    const {\n      num_comments,\n      points,\n      title,\n      url,\n      author,\n      created_at,\n    } = this.props.item;\n    const site = this.getHostname(url) || 'news.ycombinator.com';\n    return (\n      <li className=\"ListItem\">\n        <a>\n          <a className=\"Comments\"> {num_comments}</a>\n          <button onClick={this.incrementUpvote}>\n            <span className=\"UpVotes\"> {points}</span>\n          </button>\n          <span className=\"Title\">{title}</span>\n          <span className=\"LinkDomain\">({site})</span>\n          <span className=\"author\">by {author}</span>\n          <span className=\"created\">{created_at}</span>\n          <button>hide</button>\n        </a>\n      </li>\n    );\n  }\n}\nexport default ListItem;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '../ListItem/ListItem';\nimport './ListWrapper.css';\n\nclass ListWrapper extends Component {\n  static propTypes = {\n    news: PropTypes.array.isRequired,\n    pageNo: PropTypes.number.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    fetchNewsForFirstPage: PropTypes.func.isRequired,\n    updateVotesAction: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.fetchMoreNews = this.fetchMoreNews.bind(this);\n  }\n\n  fetchMoreNews() {\n    const { pageNo, isFetching, fetchNewsForFirstPage } = this.props;\n    if (!isFetching) {\n      fetchNewsForFirstPage(pageNo);\n    }\n  }\n\n  render() {\n    const { news, updateVotesAction } = this.props;\n    return (\n      <ul className=\"ListWrapper\">\n        {news.map((item, index) => (\n          <ListItem\n            key={index}\n            index={index}\n            item={item}\n            updateVotesAction={updateVotesAction}\n          />\n        ))}\n        <button onClick={this.fetchMoreNews}> More </button>\n      </ul>\n    );\n  }\n}\n\nexport default ListWrapper;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ListWrapper from './ListWrapper/ListWrapper';\nimport './HackerNews.css';\n\nclass HackerNews extends Component {\n  static defaultProps = {\n    pageNo: 0,\n  };\n\n  static propTypes = {\n    pageNo: PropTypes.number.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    fetchNewsForFirstPage: PropTypes.func.isRequired,\n    error: PropTypes.object,\n  };\n\n  componentDidMount() {\n    const { pageNo, fetchNewsForFirstPage } = this.props;\n    fetchNewsForFirstPage(pageNo);\n  }\n\n  render() {\n    const { error, isFetching } = this.props;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (isFetching) {\n      return <div>Loading...</div>;\n    }\n    return (\n      <div className=\"HackerNewsWrapper\">\n        <h1>Hacker News</h1>\n        <ListWrapper {...this.props} />\n      </div>\n    );\n  }\n}\n\nexport default HackerNews;\n","import { connect } from 'react-redux';\nimport { fetchNewsIds, updateVotesAction } from './actions';\nimport HackerNews from './HackerNews';\n\nconst mapStateToProps = state => ({\n  news: state.app.news,\n  isFetching: state.app.isFetching,\n  error: state.app.error,\n  pageNo: state.app.pageNo,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchNewsForFirstPage: pageNo => dispatch(fetchNewsIds(pageNo)),\n  updateVotesAction: id => dispatch(updateVotesAction(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HackerNews);\n","import hackerNewsApi from '../services/HackerNewsAPI';\nimport {\n  FETCH_HACKER_NEWS,\n  FETCH_HACKER_NEWS_SUCCESS,\n  FETCH_HACKER_NEWS_ERROR,\n  UPDATE_HACKER_NEWS_VOTES,\n} from './constants';\n\nexport const fetchHackerNews = pageNo => ({\n  type: FETCH_HACKER_NEWS,\n  pageNo,\n});\n\nexport const fetchHackerNewsSuccess = (newsData, pageNo) => ({\n  type: FETCH_HACKER_NEWS_SUCCESS,\n  newsData,\n  pageNo,\n});\n\nexport const fetchHackerNewsError = error => ({\n  type: FETCH_HACKER_NEWS_ERROR,\n  error,\n});\n\nexport const fetchNewsIds = pageNo => {\n  return dispatch => {\n    dispatch(fetchHackerNews(pageNo));\n    return hackerNewsApi\n      .getTopNewsIds(pageNo)\n      .then(news => {\n        const newsData = news.hits;\n        const pageNo = news.page;\n        dispatch(fetchHackerNewsSuccess(newsData, pageNo));\n        return newsData;\n      })\n      .catch(err => dispatch(fetchHackerNewsError(err)));\n  };\n};\n\nexport const updateVotesAction = id => ({\n  type: UPDATE_HACKER_NEWS_VOTES,\n  id,\n});\n","import React from 'react';\nimport MyComponent from './components/index';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\n/* eslint-disable */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderApp = () => {\n  const initialState = {};\n  const store = configureStore(initialState);\n\n  ReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrenderApp();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}